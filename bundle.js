(()=>{"use strict";function e(e,t,n){const r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),!e.getShaderParameter(r,e.COMPILE_STATUS)){const t=e.getShaderInfoLog(r);throw e.deleteShader(r),new Error("Shader compile error: "+t+"\n"+n)}return r}function t(t,n,r,a={},i=null){const o=e(t,t.VERTEX_SHADER,n),f=e(t,t.FRAGMENT_SHADER,r),c=t.createProgram();t.attachShader(c,o),t.attachShader(c,f);for(const[e,n]of Object.entries(a))t.bindAttribLocation(c,n,e);if(i&&t.transformFeedbackVaryings(c,i,t.SEPARATE_ATTRIBS),t.linkProgram(c),!t.getProgramParameter(c,t.LINK_STATUS)){const e=t.getProgramInfoLog(c);throw t.deleteProgram(c),new Error("Program link error: "+e)}return c}function n(e,t,n){const r=e.createTexture();return e.bindTexture(e.TEXTURE_2D,r),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,t,n,0,e.RGBA,e.UNSIGNED_BYTE,null),e.bindTexture(e.TEXTURE_2D,null),r}function r(e,t){const n=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,n),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;if(e.bindFramebuffer(e.FRAMEBUFFER,null),!r)throw new Error("Framebuffer incomplete");return n}const a="attribute vec2 a_pos;\nvarying vec2 v_uv;\nvoid main(){ v_uv = a_pos*0.5 + 0.5; gl_Position = vec4(a_pos,0.0,1.0); }\n",i="precision highp float;\nvarying float v_bright;\nvarying float v_type;\n\nfloat hash(float n){ return fract(sin(n) * 43758.5453123); }\nfloat noise(vec2 p){ return hash(p.x * 12.9898 + p.y * 78.233); }\n\nvoid main(){\n  vec2 p = gl_PointCoord * 2.0 - 1.0;\n  float r = length(p);\n  float density = exp(-2.5 * r * r);\n  float n = noise(p + v_bright);\n  density *= mix(0.7, 1.3, n);\n  float core = mix(0.9, 1.3, v_type);\n  float glow = mix(0.6, 1.0, v_type);\n  vec3 col = vec3(1.0) * (v_bright * core * density);\n  float alpha = density * glow;\n  gl_FragColor = vec4(col, alpha);\n}\n",o={perspective(e,t,n,r,a){const i=1/Math.tan(.5*t),o=1/(r-a);return e[0]=i/n,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=(a+r)*o,e[11]=-1,e[12]=0,e[13]=0,e[14]=2*a*r*o,e[15]=0,e},lookAt(e,t,n,r){let a=t[0]-n[0],i=t[1]-n[1],o=t[2]-n[2],f=1/Math.hypot(a,i,o);a*=f,i*=f,o*=f;let c=r[1]*o-r[2]*i,l=r[2]*a-r[0]*o,u=r[0]*i-r[1]*a;f=1/Math.hypot(c,l,u),c*=f,l*=f,u*=f;let s=i*u-o*l,_=o*c-a*u,d=a*l-i*c;return e[0]=c,e[1]=s,e[2]=a,e[3]=0,e[4]=l,e[5]=_,e[6]=i,e[7]=0,e[8]=u,e[9]=d,e[10]=o,e[11]=0,e[12]=-(c*t[0]+l*t[1]+u*t[2]),e[13]=-(s*t[0]+_*t[1]+d*t[2]),e[14]=-(a*t[0]+i*t[1]+o*t[2]),e[15]=1,e},multiply(e,t,n){const r=t[0],a=t[1],i=t[2],o=t[3],f=t[4],c=t[5],l=t[6],u=t[7],s=t[8],_=t[9],d=t[10],v=t[11],A=t[12],m=t[13],b=t[14],R=t[15],h=n[0],F=n[1],E=n[2],p=n[3],g=n[4],B=n[5],T=n[6],y=n[7],x=n[8],M=n[9],L=n[10],U=n[11],w=n[12],P=n[13],S=n[14],D=n[15];return e[0]=r*h+f*F+s*E+A*p,e[1]=a*h+c*F+_*E+m*p,e[2]=i*h+l*F+d*E+b*p,e[3]=o*h+u*F+v*E+R*p,e[4]=r*g+f*B+s*T+A*y,e[5]=a*g+c*B+_*T+m*y,e[6]=i*g+l*B+d*T+b*y,e[7]=o*g+u*B+v*T+R*y,e[8]=r*x+f*M+s*L+A*U,e[9]=a*x+c*M+_*L+m*U,e[10]=i*x+l*M+d*L+b*U,e[11]=o*x+u*M+v*L+R*U,e[12]=r*w+f*P+s*S+A*D,e[13]=a*w+c*P+_*S+m*D,e[14]=i*w+l*P+d*S+b*D,e[15]=o*w+u*P+v*S+R*D,e}};let f=3e4;const c=1/30,l=20,u=128,s={"Ambient (α+β)":{mix:[{type:"alpha",frac:.3,speed:2.2,life:3.5,size:26,bright:1.05,qScale:1},{type:"beta",frac:.7,speed:7,life:7,size:10,bright:.65,qScale:1}]},"Am-241 (α)":{mix:[{type:"alpha",frac:1,speed:2.1,life:3.8,size:28,bright:1.15,qScale:.8}]},"Po-210 (α)":{mix:[{type:"alpha",frac:1,speed:2,life:3.4,size:28,bright:1.2,qScale:.8}]},"Rn-222 (α)":{mix:[{type:"alpha",frac:1,speed:2,life:3.2,size:26,bright:1.1,qScale:.85}]},"Sr-90 (β−)":{mix:[{type:"beta",frac:1,speed:6.5,life:7.5,size:9,bright:.6,qScale:1.2}]},"Cs-137 (β−)":{mix:[{type:"beta",frac:1,speed:7.5,life:8,size:10,bright:.62,qScale:1.2}]},"Co-60 (β−)":{mix:[{type:"beta",frac:1,speed:5.5,life:6.8,size:9,bright:.6,qScale:1.1}]},"Th-232 chain (α+β)":{mix:[{type:"alpha",frac:.6,speed:2,life:3.5,size:27,bright:1.1,qScale:.85},{type:"beta",frac:.4,speed:6.8,life:7.5,size:10,bright:.62,qScale:1.15}]},"Cosmic Muons (μ)":{cosmic:!0}},_=document.createElement("canvas");document.getElementById("app").appendChild(_);const d=function(e){let t=e.getContext("webgl2",{alpha:!1,antialias:!0,preserveDrawingBuffer:!1});if(t)return t;if(t=e.getContext("webgl",{alpha:!1,antialias:!0,preserveDrawingBuffer:!1})||e.getContext("experimental-webgl",{alpha:!1,antialias:!0,preserveDrawingBuffer:!1}),!t)throw new Error("WebGL not supported");return t}(_),v="undefined"!=typeof WebGL2RenderingContext&&d instanceof WebGL2RenderingContext;v||(f=1e4);const A=t(d,a,"precision highp float;\nvarying vec2 v_uv;\nuniform sampler2D u_tex;\nvoid main(){ gl_FragColor = texture2D(u_tex, v_uv); }\n"),m=t(d,a,"precision highp float;\nvarying vec2 v_uv;\nuniform sampler2D u_prev;\nuniform float u_decay;\nuniform vec2 u_texel;\nvoid main(){\n  vec4 col = texture2D(u_prev, v_uv) * 0.4;\n  col += texture2D(u_prev, v_uv + u_texel * vec2(1.0, 0.0)) * 0.15;\n  col += texture2D(u_prev, v_uv + u_texel * vec2(-1.0, 0.0)) * 0.15;\n  col += texture2D(u_prev, v_uv + u_texel * vec2(0.0, 1.0)) * 0.15;\n  col += texture2D(u_prev, v_uv + u_texel * vec2(0.0, -1.0)) * 0.15;\n  gl_FragColor = vec4(col.rgb * u_decay, 1.0);\n}\n"),b=t(d,"precision highp float;\nattribute vec3 a_pos;\nattribute float a_size;\nattribute float a_brightness;\nattribute float a_type; // 0=beta,1=alpha\nattribute float a_active;\nuniform mat4 u_viewProj;\nuniform float u_dpr;\nvarying float v_bright;\nvarying float v_type;\nvoid main(){\n  v_bright = a_brightness;\n  v_type = a_type;\n  // Cull inactive particles by moving them off-screen and giving them a size\n  // of zero. This allows us to draw a fixed number of vertices every frame\n  // without updating an index buffer.\n  if (a_active < 0.5) {\n    gl_Position = vec4(2.0, 2.0, 2.0, 1.0);\n    gl_PointSize = 0.0;\n    return;\n  }\n  vec4 clip = u_viewProj * vec4(a_pos, 1.0);\n  gl_Position = clip;\n  float size = (a_size * u_dpr) / max(0.1, clip.w);\n  gl_PointSize = size;\n}\n",i),R=t(d,"precision highp float;\nattribute vec3 a_pos;\nattribute float a_size;\nattribute float a_brightness;\nattribute float a_type;\nattribute float a_active;\nuniform float u_bounds;\nuniform float u_dpr;\nvarying float v_bright;\nvarying float v_type;\nvoid main(){\n  v_bright = a_brightness;\n  v_type = a_type;\n  if (a_active < 0.5) {\n    gl_Position = vec4(2.0, 2.0, 0.0, 1.0);\n    gl_PointSize = 0.0;\n    return;\n  }\n  gl_Position = vec4(a_pos.x/u_bounds, a_pos.z/u_bounds, 0.0, 1.0);\n  gl_PointSize = a_size * u_dpr;\n}\n",i),h=t(d,"attribute vec3 a_pos;\nattribute vec3 a_norm;\nuniform mat4 u_viewProj;\nvarying vec3 v_norm;\nvarying vec3 v_pos;\nvoid main(){\n  v_norm = a_norm;\n  v_pos = a_pos;\n  gl_Position = u_viewProj * vec4(a_pos, 1.0);\n}\n","precision highp float;\nvarying vec3 v_norm;\nvarying vec3 v_pos;\nuniform vec3 u_eye;\nvoid main(){\n  vec3 N = normalize(v_norm);\n  vec3 V = normalize(u_eye - v_pos);\n  vec3 Nf = faceforward(N, V, N);\n  float fres = pow(1.0 - max(dot(V, Nf), 0.0), 5.0);\n  vec3 tint = vec3(0.4, 0.6, 0.7) * 0.15;\n  vec3 refl = vec3(0.1);\n  vec3 col = mix(tint, refl, fres);\n  float spec = pow(max(dot(reflect(-V, Nf), vec3(0.0,0.0,1.0)), 0.0), 16.0);\n  col += vec3(spec);\n  gl_FragColor = vec4(col, 0.15 + 0.15 * fres);\n}\n"),F=t(d,"attribute vec3 a_pos;\nuniform mat4 u_viewProj;\nvarying vec3 v_pos;\nvoid main(){\n  v_pos = a_pos;\n  gl_Position = u_viewProj * vec4(a_pos, 1.0);\n}\n","precision highp float;\nvarying vec3 v_pos;\nuniform float u_time;\n\nfloat hash(vec3 p){\n  return fract(sin(dot(p, vec3(127.1,311.7,74.7))) * 43758.5453123);\n}\n\nfloat noise(vec3 p){\n  vec3 i = floor(p);\n  vec3 f = fract(p);\n  float n000 = hash(i);\n  float n100 = hash(i + vec3(1.0,0.0,0.0));\n  float n010 = hash(i + vec3(0.0,1.0,0.0));\n  float n110 = hash(i + vec3(1.0,1.0,0.0));\n  float n001 = hash(i + vec3(0.0,0.0,1.0));\n  float n101 = hash(i + vec3(1.0,0.0,1.0));\n  float n011 = hash(i + vec3(0.0,1.0,1.0));\n  float n111 = hash(i + vec3(1.0,1.0,1.0));\n  vec3 u = f*f*(3.0-2.0*f);\n  return mix(mix(mix(n000,n100,u.x), mix(n010,n110,u.x), u.y),\n             mix(mix(n001,n101,u.x), mix(n011,n111,u.x), u.y), u.z);\n}\n\nfloat fbm(vec3 p){\n  float v = 0.0;\n  float a = 0.5;\n  for(int i=0;i<4;i++){\n    v += a * noise(p);\n    p *= 2.0;\n    a *= 0.5;\n  }\n  return v;\n}\n\nvoid main(){\n  vec3 p = v_pos * 0.1 + vec3(0.0, u_time * 0.02, 0.0);\n  float d = fbm(p);\n  float alpha = smoothstep(0.6, 0.9, d) * 0.025;\n  gl_FragColor = vec4(vec3(1.0), alpha);\n}\n"),E=t(d,"attribute vec3 a_pos;\nuniform mat4 u_viewProj;\nvoid main(){\n  gl_Position = u_viewProj * vec4(a_pos,1.0);\n}\n","precision highp float;\nuniform vec3 u_color;\nvoid main(){\n  gl_FragColor = vec4(u_color,1.0);\n}\n");let p=null;v&&(p=t(d,"#version 300 es\nprecision highp float;\n\nin vec4 a_state1; // xyz, life\nin vec4 a_state2; // vx vy vz type\nin vec4 a_state3; // size, bright, active, qScale\n\nuniform float u_dt;\nuniform float u_bounds;\nuniform float u_dragBase;\nuniform float u_jitter;\nuniform float u_B;\n\nout vec4 v_state1;\nout vec4 v_state2;\nout vec4 v_state3;\n\nfloat rand(float seed) {\n  return fract(sin(seed) * 43758.5453123);\n}\n\nvoid main() {\n  vec3 pos = a_state1.xyz;\n  float life = a_state1.w;\n  vec3 vel = a_state2.xyz;\n  float type = a_state2.w;\n  float size = a_state3.x;\n  float bright = a_state3.y;\n  float bActive = a_state3.z;\n  float qScale = a_state3.w;\n\n  if (bActive > 0.5) {\n    float qBase = type > 0.5 ? 0.6 : 1.0;\n    float q = qBase * qScale;\n    vec3 Bvec = vec3(0.0, u_B, 0.0);\n    vec3 acc = q * cross(vel, Bvec);\n    vel += acc * u_dt;\n    float drag = exp(-u_dragBase * u_dt);\n    vel *= drag;\n    float seed = float(gl_VertexID);\n    vel += vec3(\n      (rand(seed * 12.9898) * 2.0 - 1.0) * u_jitter * u_dt,\n      (rand(seed * 78.233) * 2.0 - 1.0) * u_jitter * u_dt * 0.5,\n      (rand(seed * 37.719) * 2.0 - 1.0) * u_jitter * u_dt\n    );\n    pos += vel * u_dt;\n    life -= u_dt;\n    bActive = (life > 0.0 && all(lessThan(abs(pos), vec3(u_bounds)))) ? 1.0 : 0.0;\n    bright = bright * max(0.25, life * 0.15);\n  }\n\n  v_state1 = vec4(pos, life);\n  v_state2 = vec4(vel, type);\n  v_state3 = vec4(size, bright, bActive, qScale);\n}\n","#version 300 es\nprecision highp float;\nvoid main(){}\n",{},["v_state1","v_state2","v_state3"]));const g=d.createBuffer();d.bindBuffer(d.ARRAY_BUFFER,g),d.bufferData(d.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,1,1]),d.STATIC_DRAW);const B=d.createBuffer(),T=l,y=[-T,-T,T,0,0,1,T,-T,T,0,0,1,T,T,T,0,0,1,-T,-T,T,0,0,1,T,T,T,0,0,1,-T,T,T,0,0,1,-T,-T,-T,0,0,-1,-T,T,-T,0,0,-1,T,T,-T,0,0,-1,-T,-T,-T,0,0,-1,T,T,-T,0,0,-1,T,-T,-T,0,0,-1,-T,-T,-T,-1,0,0,-T,-T,T,-1,0,0,-T,T,T,-1,0,0,-T,-T,-T,-1,0,0,-T,T,T,-1,0,0,-T,T,-T,-1,0,0,T,-T,-T,1,0,0,T,T,-T,1,0,0,T,T,T,1,0,0,T,-T,-T,1,0,0,T,T,T,1,0,0,T,-T,T,1,0,0,-T,T,-T,0,1,0,-T,T,T,0,1,0,T,T,T,0,1,0,-T,T,-T,0,1,0,T,T,T,0,1,0,T,T,-T,0,1,0,-T,-T,-T,0,-1,0,T,-T,-T,0,-1,0,T,-T,T,0,-1,0,-T,-T,-T,0,-1,0,T,-T,T,0,-1,0,-T,-T,T,0,-1,0];d.bindBuffer(d.ARRAY_BUFFER,B),d.bufferData(d.ARRAY_BUFFER,new Float32Array(y),d.STATIC_DRAW);const x=d.createBuffer(),M=[-T,-T,-T,T,-T,-T,T,-T,-T,T,-T,T,T,-T,T,-T,-T,T,-T,-T,T,-T,-T,-T,-T,T,-T,T,T,-T,T,T,-T,T,T,T,T,T,T,-T,T,T,-T,T,T,-T,T,-T,-T,-T,-T,-T,T,-T,T,-T,-T,T,T,-T,T,-T,T,T,T,T,-T,-T,T,-T,T,T];d.bindBuffer(d.ARRAY_BUFFER,x),d.bufferData(d.ARRAY_BUFFER,new Float32Array(M),d.STATIC_DRAW);const L=d.createBuffer();!function(){const e=[];for(let t=0;t<96;t++){const n=t/95*40-20;e.push(-T,-T,n,T,-T,n,T,T,n,-T,-T,n,T,T,n,-T,T,n)}d.bindBuffer(d.ARRAY_BUFFER,L),d.bufferData(d.ARRAY_BUFFER,new Float32Array(e),d.STATIC_DRAW)}();let U,w,P,S,D,C,I,Y,N=2,O=2,z=1;function X(){d.disable(d.BLEND),d.bindFramebuffer(d.FRAMEBUFFER,P),d.clearColor(0,0,0,1),d.clear(d.COLOR_BUFFER_BIT),d.bindFramebuffer(d.FRAMEBUFFER,S),d.clearColor(0,0,0,1),d.clear(d.COLOR_BUFFER_BIT),I&&V(),d.bindFramebuffer(d.FRAMEBUFFER,null)}function V(){d.disable(d.BLEND),d.bindFramebuffer(d.FRAMEBUFFER,I),d.clearColor(0,0,0,1),d.clear(d.COLOR_BUFFER_BIT),d.bindFramebuffer(d.FRAMEBUFFER,Y),d.clearColor(0,0,0,1),d.clear(d.COLOR_BUFFER_BIT),d.bindFramebuffer(d.FRAMEBUFFER,null)}function q(){z=Math.min(2,window.devicePixelRatio||1);const e=Math.max(2,Math.floor(window.innerWidth*z)),t=Math.max(2,Math.floor(window.innerHeight*z));e===N&&t===O||(N=e,O=t,_.width=e,_.height=t,_.style.width="100%",_.style.height="100%",d.viewport(0,0,e,t),function(e,t){U&&d.deleteTexture(U),w&&d.deleteTexture(w),P&&d.deleteFramebuffer(P),S&&d.deleteFramebuffer(S),U=n(d,e,t),w=n(d,e,t),P=r(d,U),S=r(d,w),X()}(e,t))}window.addEventListener("resize",q),q(),D&&d.deleteTexture(D),C&&d.deleteTexture(C),I&&d.deleteFramebuffer(I),Y&&d.deleteFramebuffer(Y),D=n(d,u,u),C=n(d,u,u),I=r(d,D),Y=r(d,C),V();let j=1.2,k=.2,W=64,G=!1,H=0,K=0,Z=!1,$=0;function J(){const e=Q(),t=new Float32Array(16),n=new Float32Array(16),r=new Float32Array(16);o.lookAt(t,e,[0,0,0],[0,1,0]);const a=60*Math.PI/180;return o.perspective(n,a,N/O,.1,400),o.multiply(r,n,t),r}function Q(){return[W*Math.cos(k)*Math.cos(j),W*Math.sin(k),W*Math.cos(k)*Math.sin(j)]}_.addEventListener("mousedown",e=>{G=!0,H=e.clientX,K=e.clientY}),window.addEventListener("mouseup",()=>G=!1),window.addEventListener("mousemove",e=>{if(!G)return;const t=(e.clientX-H)/window.innerWidth,n=(e.clientY-K)/window.innerHeight;j+=3*t,k=Math.max(-1.2,Math.min(1.2,k+3*n)),H=e.clientX,K=e.clientY}),window.addEventListener("wheel",e=>{const t=1/W*100;W=Math.max(4,Math.min(100,W+Math.sign(e.deltaY)*t))}),_.addEventListener("touchstart",e=>{if(1===e.touches.length){G=!0;const t=e.touches[0];H=t.clientX,K=t.clientY}else if(2===e.touches.length){Z=!0;const t=e.touches[0].clientX-e.touches[1].clientX,n=e.touches[0].clientY-e.touches[1].clientY;$=Math.hypot(t,n)}e.preventDefault()},{passive:!1}),window.addEventListener("touchend",e=>{0===e.touches.length&&(G=!1),e.touches.length<2&&(Z=!1)}),window.addEventListener("touchcancel",()=>{G=!1,Z=!1}),window.addEventListener("touchmove",e=>{if(Z&&2===e.touches.length){const t=e.touches[0].clientX-e.touches[1].clientX,n=e.touches[0].clientY-e.touches[1].clientY,r=Math.hypot(t,n),a=r-$,i=1/W*20;return W=Math.max(4,Math.min(100,W-a*i)),$=r,void e.preventDefault()}if(G&&1===e.touches.length){const t=e.touches[0],n=(t.clientX-H)/window.innerWidth,r=(t.clientY-K)/window.innerHeight;j+=3*n,k=Math.max(-1.2,Math.min(1.2,k+3*r)),H=t.clientX,K=t.clientY,e.preventDefault()}},{passive:!1});let ee,te,ne,re,ae=null,ie=0;if(v){const e=[d.createBuffer(),d.createBuffer(),d.createBuffer()],t=[d.createBuffer(),d.createBuffer(),d.createBuffer()];for(const n of[...e,...t])d.bindBuffer(d.ARRAY_BUFFER,n),d.bufferData(d.ARRAY_BUFFER,new Float32Array(4*f),d.DYNAMIC_COPY);ee=e,ae=t}else{ee=[d.createBuffer(),d.createBuffer(),d.createBuffer()],te=new Float32Array(4*f),ne=new Float32Array(4*f),re=new Float32Array(4*f);const e=[te,ne,re];for(let t=0;t<3;t++)d.bindBuffer(d.ARRAY_BUFFER,ee[t]),d.bufferData(d.ARRAY_BUFFER,e[t],d.DYNAMIC_DRAW)}function oe(e){const t=_e.value,n=s[t]||s["Ambient (α+β)"];if(n.cosmic){const e=18,t=(2*Math.random()-1)*e,n=(2*Math.random()-1)*e,r=22,a=[.1*Math.random()-.05,-1,.1*Math.random()-.05],i=30,o=50;return void fe(t,r,n,a[0]*i,a[1]*i,a[2]*i,o,0,8,.5,.05)}const r=function(e){const t=Math.random();let n=0;for(const r of e)if(n+=r.frac,t<=n)return r;return e[e.length-1]}(n.mix),a=function(){const e=2*Math.random()-1,t=Math.random()*Math.PI*2,n=Math.sqrt(Math.max(0,1-e*e));return[n*Math.cos(t),n*Math.sin(t),e]}(),i=r.speed*(.85+.3*Math.random()),o=r.life*(.9+.3*Math.random()),f="alpha"===r.type?1:0;fe(e[0],e[1],e[2],a[0]*i,a[1]*i,a[2]*i,o,f,r.size,r.bright,r.qScale)}function fe(e,t,n,r,a,i,o,c,l,u,s){const _=ie;if(ie=(ie+1)%f,v)d.bindBuffer(d.ARRAY_BUFFER,ee[0]),d.bufferSubData(d.ARRAY_BUFFER,16*_,new Float32Array([e,t,n,o])),d.bindBuffer(d.ARRAY_BUFFER,ee[1]),d.bufferSubData(d.ARRAY_BUFFER,16*_,new Float32Array([r,a,i,c])),d.bindBuffer(d.ARRAY_BUFFER,ee[2]),d.bufferSubData(d.ARRAY_BUFFER,16*_,new Float32Array([l,u,1,s||1]));else{const f=4*_;te.set([e,t,n,o],f),ne.set([r,a,i,c],f),re.set([l,u,1,s||1],f),d.bindBuffer(d.ARRAY_BUFFER,ee[0]),d.bufferSubData(d.ARRAY_BUFFER,16*_,te.subarray(f,f+4)),d.bindBuffer(d.ARRAY_BUFFER,ee[1]),d.bufferSubData(d.ARRAY_BUFFER,16*_,ne.subarray(f,f+4)),d.bindBuffer(d.ARRAY_BUFFER,ee[2]),d.bufferSubData(d.ARRAY_BUFFER,16*_,re.subarray(f,f+4))}}_.addEventListener("click",e=>{oe(function(e,t){const n=j,r=k,a=W,i=[a*Math.cos(r)*Math.cos(n),a*Math.sin(r),a*Math.cos(r)*Math.sin(n)],o=e/window.innerWidth*2-1,f=1-t/window.innerHeight*2,c=[-i[0],-i[1],-i[2]],l=Math.hypot(c[0],c[1],c[2]);c[0]/=l,c[1]/=l,c[2]/=l;let u=[c[2],0,-c[0]],s=Math.hypot(u[0],u[1],u[2]);u=[u[0]/s,u[1]/s,u[2]/s];let _=[u[1]*c[2]-u[2]*c[1],u[2]*c[0]-u[0]*c[2],u[0]*c[1]-u[1]*c[0]];const d=60*Math.PI/180,v=window.innerWidth/window.innerHeight,A=Math.tan(d/2),m=[c[0]+o*v*A*u[0]+f*A*_[0],c[1]+o*v*A*u[1]+f*A*_[1],c[2]+o*v*A*u[2]+f*A*_[2]],b=-i[1]/(m[1]||1e-6);return[i[0]+m[0]*b,0,i[2]+m[2]*b]}(e.clientX,e.clientY))});const ce=document.getElementById("bRange"),le=document.getElementById("vRange"),ue=document.getElementById("rRange"),se=document.getElementById("trailRange"),_e=document.getElementById("isoSelect"),de=document.getElementById("toggleBtn"),ve=document.getElementById("clearBtn"),Ae=document.getElementById("densityBtn"),me=document.getElementById("settingsBtn"),be=document.getElementById("settingsPanel");function Re(){if(be.classList.contains("open")){const e=be.offsetWidth;me.style.transform=`translateX(${e}px)`}else me.style.transform=""}const he={};for(const e of _e.options)he[e.value]=parseFloat(ue.value);he["Cosmic Muons (μ)"]=5,_e.addEventListener("change",()=>{ue.value=he[_e.value]||0}),ue.addEventListener("input",()=>{he[_e.value]=parseFloat(ue.value)});let Fe=!1;de.addEventListener("click",()=>{Fe=!Fe,de.textContent=Fe?"Resume":"Pause"}),ve.addEventListener("click",()=>{X()}),Ae.addEventListener("click",()=>{pe=!pe,Ae.textContent=pe?"Density: On":"Density: Off",pe&&V()}),me.addEventListener("click",()=>{be.classList.toggle("open"),Re()}),window.addEventListener("resize",Re),Re();let Ee,pe=!1;function ge(e){const t=d.getAttribLocation(e,"a_pos");d.bindBuffer(d.ARRAY_BUFFER,g),d.enableVertexAttribArray(t),d.vertexAttribPointer(t,2,d.FLOAT,!1,0,0)}function Be(e,t){const n=d.getAttribLocation(e,"a_pos"),r=d.getAttribLocation(e,"a_size"),a=d.getAttribLocation(e,"a_brightness"),i=d.getAttribLocation(e,"a_type"),o=d.getAttribLocation(e,"a_active");d.bindBuffer(d.ARRAY_BUFFER,t[0]),d.enableVertexAttribArray(n),d.vertexAttribPointer(n,3,d.FLOAT,!1,16,0),d.bindBuffer(d.ARRAY_BUFFER,t[1]),d.enableVertexAttribArray(i),d.vertexAttribPointer(i,1,d.FLOAT,!1,16,12),d.bindBuffer(d.ARRAY_BUFFER,t[2]),d.enableVertexAttribArray(r),d.vertexAttribPointer(r,1,d.FLOAT,!1,16,0),d.enableVertexAttribArray(a),d.vertexAttribPointer(a,1,d.FLOAT,!1,16,4),d.enableVertexAttribArray(o),d.vertexAttribPointer(o,1,d.FLOAT,!1,16,8)}Ee=v?function(e){const t=parseFloat(ce.value),n=parseFloat(le.value),r=parseFloat(ue.value)*e;let a=Math.floor(r);Math.random()<r-a&&a++;const i=_e.value;for(let e=0;e<a;e++)if("Cosmic Muons (μ)"===i)oe(null);else{const e=18;oe([(2*Math.random()-1)*e,(2*Math.random()-1)*e,(2*Math.random()-1)*e])}const o=.3+.8*n,c=.3+1.2*n;d.useProgram(p);const u=d.getAttribLocation(p,"a_state1"),s=d.getAttribLocation(p,"a_state2"),_=d.getAttribLocation(p,"a_state3");d.bindBuffer(d.ARRAY_BUFFER,ee[0]),d.enableVertexAttribArray(u),d.vertexAttribPointer(u,4,d.FLOAT,!1,0,0),d.bindBuffer(d.ARRAY_BUFFER,ee[1]),d.enableVertexAttribArray(s),d.vertexAttribPointer(s,4,d.FLOAT,!1,0,0),d.bindBuffer(d.ARRAY_BUFFER,ee[2]),d.enableVertexAttribArray(_),d.vertexAttribPointer(_,4,d.FLOAT,!1,0,0),d.bindBufferBase(d.TRANSFORM_FEEDBACK_BUFFER,0,ae[0]),d.bindBufferBase(d.TRANSFORM_FEEDBACK_BUFFER,1,ae[1]),d.bindBufferBase(d.TRANSFORM_FEEDBACK_BUFFER,2,ae[2]),d.uniform1f(d.getUniformLocation(p,"u_dt"),e),d.uniform1f(d.getUniformLocation(p,"u_bounds"),l),d.uniform1f(d.getUniformLocation(p,"u_dragBase"),o),d.uniform1f(d.getUniformLocation(p,"u_jitter"),c),d.uniform1f(d.getUniformLocation(p,"u_B"),t),d.enable(d.RASTERIZER_DISCARD),d.beginTransformFeedback(d.POINTS),d.drawArrays(d.POINTS,0,f),d.endTransformFeedback(),d.disable(d.RASTERIZER_DISCARD),d.bindBufferBase(d.TRANSFORM_FEEDBACK_BUFFER,0,null),d.bindBufferBase(d.TRANSFORM_FEEDBACK_BUFFER,1,null),d.bindBufferBase(d.TRANSFORM_FEEDBACK_BUFFER,2,null),d.disableVertexAttribArray(u),d.disableVertexAttribArray(s),d.disableVertexAttribArray(_);let v=ee;ee=ae,ae=v}:function(e){const t=parseFloat(ce.value),n=parseFloat(le.value),r=parseFloat(ue.value)*e;let a=Math.floor(r);Math.random()<r-a&&a++;const i=_e.value;for(let e=0;e<a;e++)if("Cosmic Muons (μ)"===i)oe(null);else{const e=18;oe([(2*Math.random()-1)*e,(2*Math.random()-1)*e,(2*Math.random()-1)*e])}const o=.3+.8*n,c=.3+1.2*n;function u(e){const t=43758.5453123*Math.sin(e);return t-Math.floor(t)}for(let n=0;n<f;n++){const r=4*n;let a=te[r],i=te[r+1],f=te[r+2],s=te[r+3],_=ne[r],d=ne[r+1],v=ne[r+2],A=ne[r+3],m=re[r],b=re[r+1],R=re[r+2],h=re[r+3];if(R>.5){const r=(A>.5?.6:1)*h,m=r*(-_*t);_+=r*(v*t)*e,v+=m*e;const F=Math.exp(-o*e);_*=F,d*=F,v*=F;const E=n;_+=(2*u(12.9898*E)-1)*c*e,d+=(2*u(78.233*E)-1)*c*e*.5,v+=(2*u(37.719*E)-1)*c*e,a+=_*e,i+=d*e,f+=v*e,s-=e,R=s>0&&Math.abs(a)<l&&Math.abs(i)<l&&Math.abs(f)<l?1:0,b*=Math.max(.25,.15*s)}te[r]=a,te[r+1]=i,te[r+2]=f,te[r+3]=s,ne[r]=_,ne[r+1]=d,ne[r+2]=v,ne[r+3]=A,re[r]=m,re[r+1]=b,re[r+2]=R,re[r+3]=h}d.bindBuffer(d.ARRAY_BUFFER,ee[0]),d.bufferSubData(d.ARRAY_BUFFER,0,te),d.bindBuffer(d.ARRAY_BUFFER,ee[1]),d.bufferSubData(d.ARRAY_BUFFER,0,ne),d.bindBuffer(d.ARRAY_BUFFER,ee[2]),d.bufferSubData(d.ARRAY_BUFFER,0,re)};let Te=performance.now();requestAnimationFrame(function e(t){const n=Math.min(c,(t-Te)/1e3);Te=t,Fe||Ee(n);const r=parseFloat(se.value);!function(e,t,n){d.bindFramebuffer(d.FRAMEBUFFER,e),d.viewport(0,0,N,O),d.disable(d.BLEND),d.useProgram(m),ge(m),d.activeTexture(d.TEXTURE0),d.bindTexture(d.TEXTURE_2D,t),d.uniform1i(d.getUniformLocation(m,"u_prev"),0),d.uniform1f(d.getUniformLocation(m,"u_decay"),n),d.uniform2f(d.getUniformLocation(m,"u_texel"),1/N,1/O),d.drawArrays(d.TRIANGLE_STRIP,0,4),d.enable(d.BLEND),d.blendFunc(d.SRC_ALPHA,d.ONE),d.useProgram(b),Be(b,ee),d.uniformMatrix4fv(d.getUniformLocation(b,"u_viewProj"),!1,J()),d.uniform1f(d.getUniformLocation(b,"u_dpr"),z),d.drawArrays(d.POINTS,0,f),d.bindFramebuffer(d.FRAMEBUFFER,null)}(P,w,r),pe&&function(e,t,n){d.bindFramebuffer(d.FRAMEBUFFER,e),d.viewport(0,0,u,u),d.disable(d.BLEND),d.useProgram(m),ge(m),d.activeTexture(d.TEXTURE0),d.bindTexture(d.TEXTURE_2D,t),d.uniform1i(d.getUniformLocation(m,"u_prev"),0),d.uniform1f(d.getUniformLocation(m,"u_decay"),n),d.uniform2f(d.getUniformLocation(m,"u_texel"),.0078125,.0078125),d.drawArrays(d.TRIANGLE_STRIP,0,4),d.enable(d.BLEND),d.blendFunc(d.SRC_ALPHA,d.ONE),d.useProgram(R),Be(R,ee),d.uniform1f(d.getUniformLocation(R,"u_bounds"),l),d.uniform1f(d.getUniformLocation(R,"u_dpr"),z),d.drawArrays(d.POINTS,0,f),d.bindFramebuffer(d.FRAMEBUFFER,null)}(I,C,r),function(e,t){d.disable(d.DEPTH_TEST),d.viewport(0,0,N,O),d.disable(d.BLEND),d.useProgram(A),ge(A),d.activeTexture(d.TEXTURE0),d.bindTexture(d.TEXTURE_2D,e),d.uniform1i(d.getUniformLocation(A,"u_tex"),0),d.drawArrays(d.TRIANGLE_STRIP,0,4),d.enable(d.BLEND),d.blendFunc(d.SRC_ALPHA,d.ONE_MINUS_SRC_ALPHA),d.enable(d.DEPTH_TEST),d.depthMask(!0),d.clear(d.DEPTH_BUFFER_BIT),d.depthMask(!1),d.useProgram(F),function(e){const t=d.getAttribLocation(e,"a_pos");d.bindBuffer(d.ARRAY_BUFFER,L),d.enableVertexAttribArray(t),d.vertexAttribPointer(t,3,d.FLOAT,!1,0,0)}(F),d.uniformMatrix4fv(d.getUniformLocation(F,"u_viewProj"),!1,J()),d.uniform1f(d.getUniformLocation(F,"u_time"),t/1e3),d.drawArrays(d.TRIANGLES,0,576),d.depthMask(!0),d.useProgram(h),function(e){const t=d.getAttribLocation(e,"a_pos"),n=d.getAttribLocation(e,"a_norm");d.bindBuffer(d.ARRAY_BUFFER,B),d.enableVertexAttribArray(t),d.vertexAttribPointer(t,3,d.FLOAT,!1,24,0),d.enableVertexAttribArray(n),d.vertexAttribPointer(n,3,d.FLOAT,!1,24,12)}(h);const n=Q();if(d.uniformMatrix4fv(d.getUniformLocation(h,"u_viewProj"),!1,J()),d.uniform3f(d.getUniformLocation(h,"u_eye"),n[0],n[1],n[2]),d.depthMask(!1),d.enable(d.CULL_FACE),d.cullFace(d.FRONT),d.drawArrays(d.TRIANGLES,0,36),d.cullFace(d.BACK),d.drawArrays(d.TRIANGLES,0,36),d.disable(d.CULL_FACE),d.depthMask(!0),d.disable(d.BLEND),d.useProgram(E),function(e){const t=d.getAttribLocation(e,"a_pos");d.bindBuffer(d.ARRAY_BUFFER,x),d.enableVertexAttribArray(t),d.vertexAttribPointer(t,3,d.FLOAT,!1,0,0)}(E),d.uniformMatrix4fv(d.getUniformLocation(E,"u_viewProj"),!1,J()),d.uniform3f(d.getUniformLocation(E,"u_color"),.4,.6,.7),d.lineWidth(3),d.drawArrays(d.LINES,0,24),d.lineWidth(1),d.enable(d.BLEND),d.disable(d.DEPTH_TEST),pe){const e=Math.floor(.3*Math.min(N,O));d.viewport(10,10,e,e),d.disable(d.BLEND),d.useProgram(A),ge(A),d.activeTexture(d.TEXTURE0),d.bindTexture(d.TEXTURE_2D,D),d.uniform1i(d.getUniformLocation(A,"u_tex"),0),d.drawArrays(d.TRIANGLE_STRIP,0,4),d.viewport(0,0,N,O)}}(U,t);let a=U;U=w,w=a;let i=P;P=S,S=i,pe&&(a=D,D=C,C=a,i=I,I=Y,Y=i),requestAnimationFrame(e)});for(let e=0;e<48;e++){const e=18;oe([(2*Math.random()-1)*e,(2*Math.random()-1)*e,(2*Math.random()-1)*e])}X()})();